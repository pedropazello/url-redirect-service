// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	entities "github.com/pedropazello/url-redirect-service/entities"

	mock "github.com/stretchr/testify/mock"
)

// IRedirectsRepository is an autogenerated mock type for the IRedirectsRepository type
type IRedirectsRepository struct {
	mock.Mock
}

type IRedirectsRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *IRedirectsRepository) EXPECT() *IRedirectsRepository_Expecter {
	return &IRedirectsRepository_Expecter{mock: &_m.Mock}
}

// GetItem provides a mock function with given fields: _a0, Id
func (_m *IRedirectsRepository) GetItem(_a0 context.Context, Id string) (entities.Redirect, error) {
	ret := _m.Called(_a0, Id)

	if len(ret) == 0 {
		panic("no return value specified for GetItem")
	}

	var r0 entities.Redirect
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (entities.Redirect, error)); ok {
		return rf(_a0, Id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) entities.Redirect); ok {
		r0 = rf(_a0, Id)
	} else {
		r0 = ret.Get(0).(entities.Redirect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, Id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRedirectsRepository_GetItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetItem'
type IRedirectsRepository_GetItem_Call struct {
	*mock.Call
}

// GetItem is a helper method to define mock.On call
//   - _a0 context.Context
//   - Id string
func (_e *IRedirectsRepository_Expecter) GetItem(_a0 interface{}, Id interface{}) *IRedirectsRepository_GetItem_Call {
	return &IRedirectsRepository_GetItem_Call{Call: _e.mock.On("GetItem", _a0, Id)}
}

func (_c *IRedirectsRepository_GetItem_Call) Run(run func(_a0 context.Context, Id string)) *IRedirectsRepository_GetItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IRedirectsRepository_GetItem_Call) Return(_a0 entities.Redirect, _a1 error) *IRedirectsRepository_GetItem_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRedirectsRepository_GetItem_Call) RunAndReturn(run func(context.Context, string) (entities.Redirect, error)) *IRedirectsRepository_GetItem_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRedirectsRepository creates a new instance of IRedirectsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRedirectsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRedirectsRepository {
	mock := &IRedirectsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
