// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// IRedirectUsecase is an autogenerated mock type for the IRedirectUsecase type
type IRedirectUsecase struct {
	mock.Mock
}

type IRedirectUsecase_Expecter struct {
	mock *mock.Mock
}

func (_m *IRedirectUsecase) EXPECT() *IRedirectUsecase_Expecter {
	return &IRedirectUsecase_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: _a0, path
func (_m *IRedirectUsecase) Execute(_a0 context.Context, path string) (string, error) {
	ret := _m.Called(_a0, path)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(_a0, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(_a0, path)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IRedirectUsecase_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type IRedirectUsecase_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - _a0 context.Context
//   - path string
func (_e *IRedirectUsecase_Expecter) Execute(_a0 interface{}, path interface{}) *IRedirectUsecase_Execute_Call {
	return &IRedirectUsecase_Execute_Call{Call: _e.mock.On("Execute", _a0, path)}
}

func (_c *IRedirectUsecase_Execute_Call) Run(run func(_a0 context.Context, path string)) *IRedirectUsecase_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *IRedirectUsecase_Execute_Call) Return(_a0 string, _a1 error) *IRedirectUsecase_Execute_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IRedirectUsecase_Execute_Call) RunAndReturn(run func(context.Context, string) (string, error)) *IRedirectUsecase_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewIRedirectUsecase creates a new instance of IRedirectUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIRedirectUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IRedirectUsecase {
	mock := &IRedirectUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
